{"version":3,"sources":["serviceWorker.js","model/Note.ts","reducers.ts","store.js","header/HeaderTitle.tsx","actions.ts","header/HeaderFilter.tsx","header/Header.tsx","editor/NoteEditorPlaceholder.tsx","editor/NoteTitle.tsx","editor/NoteContent.tsx","editor/NotePath.tsx","editor/EditorTab.tsx","editor/EditorTabs.tsx","editor/NoteEditor.tsx","navigation/TreeNode.tsx","navigation/Tree.tsx","navigation/CreateNoteFormButtons.tsx","navigation/CreateNoteForm.tsx","navigation/Navigation.tsx","index.js","App.tsx"],"names":["Boolean","window","location","hostname","match","Note","id","title","content","children","this","defaultState","notes","openedNotes","filteredNotes","filter","path","active","flattenNotes","result","flat","getChildren","findNote","note","getId","childNote","getPath","length","updateNote","noteToUpdate","i","store","createStore","state","action","type","root","setChildren","activeNote","indexOf","n","getTitle","getContent","map","openedTabs","HeaderTitle","props","className","setActiveNote","closeActive","HeaderFilter","useSelector","dispatch","useDispatch","placeholder","value","onChange","event","target","updateFilter","Header","NoteEditorPlaceholder","style","height","opacity","NoteTitle","NoteContent","NotePath","items","p","key","onClick","EditorTab","activeClass","tab","maxWidth","stopPropagation","EditorTabs","opened","tabs","NoteEditor","TreeNode","Tree","CreateNoteFormButtons","width","addNote","hideForm","CreateNoteForm","useState","formVisible","setFormVisible","setTitle","Date","getTime","Navigation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b89437fc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export class Note {\n\n    constructor(\n        private id: number,\n        private title: string,\n        private content: string,\n        private children: Array<Note> = []\n    ) {\n        this.id = id;\n        this.title = title;\n        this.content = content;\n        this.children = children;\n    }\n\n    getId(): number {\n        return this.id;\n    }\n\n    setId(id: number): void {\n        this.id = id;\n    }\n\n    getTitle(): string {\n        return this.title;\n    }\n\n    setTitle(title: string): void {\n        this.title = title;\n    }\n\n    getContent(): string {\n        return this.content;\n    }\n\n    setContent(content: string): void {\n        this.content = content;\n    }\n\n    getChildren(): Array<Note> {\n        return this.children;\n    }\n\n    setChildren(children: Array<Note>): void {\n        this.children = children;\n    }\n\n}","import {Note} from \"./model/Note\";\n\nexport type ActiveNote = Note | null;\nexport interface Notes {\n    notes: Array<Note>;\n    openedNotes: Array<Note>;\n    filteredNotes: Array<Note>,\n    filter: string,\n    path: Array<Note>,\n    active: ActiveNote\n}\n\nconst defaultState: Notes = {\n    notes: [],\n    openedNotes: [],\n    filteredNotes: [],\n    filter: '',\n    path: [],\n    active: null\n};\n\nexport const notes = (state: Notes = defaultState, action: any) => {\n    if (action.type === 'ADD_NOTE') {\n        let root = [...state.notes];\n        if (state.active) {\n            state.active.setChildren([\n                ...state.active.getChildren(),\n                action.note]\n            );\n        } else {\n            root = [...state.notes, action.note];\n        }\n\n        let openedNotes = [ ...state.openedNotes, action.note ];\n\n        return {\n            ...state,\n            active: action.note,\n            openedNotes: openedNotes,\n            notes: root,\n            path: getPath(root, action.note.id)\n        };\n    } else if (action.type === 'SET_ACTIVE_NOTE') {\n        let activeNote = findNote(state.notes, action.note.id);\n        let openedNotes = state.openedNotes;\n\n        if (state.active && activeNote && activeNote.getId() === state.active.getId()) {\n            activeNote = null;\n        } else if (activeNote && openedNotes.indexOf(activeNote) === -1) {\n            openedNotes = [ ...openedNotes, activeNote ];\n        }\n\n        return {\n            ...state,\n            active: activeNote,\n            openedNotes: openedNotes,\n            path: activeNote ? getPath(state.notes, activeNote.getId()) : []\n        };\n    } else if (action.type === 'UPDATE_NOTE') {\n        updateNote(state.notes, action.note);\n        return {\n            ...state,\n            active: action.note\n        };\n    } else if (action.type === 'SET_FILTER') {\n        const flat = flattenNotes(state.notes);\n        const filter = action.filter;\n        const filteredNotes = flat.filter(n => n.getTitle().indexOf(filter) !== -1 || n.getContent().indexOf(filter) !== -1)\n            .map(n => new Note(\n                n.getId(),\n                n.getTitle(),\n                n.getContent(),\n                []\n            ));\n\n        return {\n            ...state,\n            filter: filter,\n            filteredNotes: filteredNotes\n        };\n    } else if (action.type === 'CLOSE_ACTIVE') {\n        let openedTabs = state.openedNotes.filter(n => n.getId() !== state.active?.getId());\n        return {\n            ...state,\n            active: openedTabs.length ? openedTabs[0] : null,\n            openedNotes: openedTabs\n        };\n    } else {\n        return state;\n    }\n};\n\nfunction flattenNotes(notes: Array<Note>): Array<Note> {\n    let result = [...notes];\n    for (let note of notes) {\n        const flat = flattenNotes(note.getChildren());\n        result = [...result, ...flat];\n    }\n\n    return result;\n}\n\nfunction findNote(notes: Array<Note>, id: number): Note | null {\n\n    for (let note of notes) {\n        if (note.getId() === id) {\n            return note;\n        }\n\n        const childNote = findNote(note.getChildren(), id);\n        if (childNote) {\n            return childNote;\n        }\n    }\n\n    return null;\n}\n\nfunction getPath(notes: Array<Note>, id: number): Array<Note> {\n\n    for (let note of notes) {\n        if (note.getId() === id) {\n            return [note];\n        }\n\n        const childNote = getPath(note.getChildren(), id);\n        if (childNote.length !== 0) {\n            return [note, ...childNote];\n        }\n    }\n\n    return [];\n}\n\nfunction updateNote(notes: Array<Note>, noteToUpdate: Note): void {\n    for (let i = 0; i < notes.length; i++) {\n        if (noteToUpdate.getId() === notes[i].getId()) {\n            notes[i] = noteToUpdate;\n        }\n\n        updateNote(notes[i].getChildren(), noteToUpdate);\n    }\n}","import {createStore} from 'redux';\nimport { notes } from './reducers';\n\nexport const store = createStore(\n    notes\n);","import * as React from \"react\";\n\nexport const HeaderTitle = function (props: { title: string }) {\n    return (\n        <div className=\"card-title mb-0\">\n            <i className=\"fas fa-sticky-note mr-2\"/>\n            <b>\n                { props.title }\n            </b>\n        </div>\n    );\n};","import {Note} from \"./model/Note\";\n\nexport const updateNote = (note: Note) => ({\n    type: 'UPDATE_NOTE',\n    note\n});\n\nexport const setActiveNote = (note: Note) => ({\n    type: 'SET_ACTIVE_NOTE',\n    note\n});\n\nexport const updateFilter = (filter: string) => ({\n    type: 'SET_FILTER',\n    filter: filter\n});\n\nexport const closeActive = () => ({\n    type: 'CLOSE_ACTIVE'\n});\n\n\nexport const addNote = (title: string) => ({\n    type: 'ADD_NOTE',\n    note: new Note(\n        new Date().getTime(),\n        title,\n        `Content of the \"${title}\"...`,\n        []\n    )\n});","import * as React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateFilter} from \"../actions\";\nimport {Notes} from \"../reducers\";\n\nexport const HeaderFilter = function () {\n\n    const filter = useSelector<Notes, string>(state => state.filter);\n    const dispatch = useDispatch();\n\n    const onFilterUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        dispatch(updateFilter(value));\n    };\n\n    return (\n        <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">\n                    <i className=\"fas fa-search\"/>\n                </span>\n            </div>\n            <input type=\"text\"\n                   className=\"form-control\"\n                   placeholder=\"Search...\"\n                   value={filter}\n                   onChange={onFilterUpdate}/>\n        </div>\n    );\n};","import * as React from \"react\";\nimport {HeaderTitle} from \"./HeaderTitle\";\nimport {HeaderFilter} from \"./HeaderFilter\";\n\nexport const Header = function () {\n    return (\n        <div className=\"card-header\">\n            <div className=\"row align-items-center\">\n                <div className=\"col\">\n                    <HeaderTitle title=\"React notes app\"/>\n                </div>\n                <div className=\"col-auto\">\n                    <HeaderFilter/>\n                </div>\n            </div>\n        </div>\n    );\n};","import React from 'react';\n\nexport function NoteEditorPlaceholder() {\n    return (\n        <div className=\"d-flex align-items-center justify-content-center\"\n             style={{ height: '60vh' }}>\n            <div className=\"font-weight-bold\"\n                 style={{ opacity: '.3'}}>\n                Select note to update\n            </div>\n        </div>\n    );\n}","import * as React from \"react\";\nimport {Note} from \"../model/Note\";\nimport {useDispatch} from \"react-redux\";\nimport {updateNote} from \"../actions\";\n\nexport const NoteTitle = function (props: { activeNote: Note }) {\n    const dispatch = useDispatch();\n    const onTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const note = new Note(\n            props.activeNote.getId(),\n            event.target.value,\n            props.activeNote.getContent(),\n            props.activeNote.getChildren()\n        );\n\n        dispatch(updateNote(note));\n    };\n\n    return (\n        <div className=\"form-group mb-1\">\n            <input type=\"text\"\n                   className=\"form-control form-control-lg bg-dark border-dark text-white font-weight-bold\"\n                   value={props.activeNote.getTitle()}\n                   onChange={onTitleChange}/>\n        </div>\n    );\n\n};","import * as React from \"react\";\nimport {Note} from \"../model/Note\";\nimport {useDispatch} from \"react-redux\";\nimport {updateNote} from \"../actions\";\n\nexport const NoteContent = function (props: { activeNote: Note }) {\n    const dispatch = useDispatch();\n    const contentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const note = new Note(\n            props.activeNote.getId(),\n            props.activeNote.getTitle(),\n            event.target.value,\n            props.activeNote.getChildren()\n        );\n        dispatch(updateNote(note));\n    };\n\n    return (\n        <div className=\"form-group mb-0\">\n                    <textarea className=\"form-control pl-3 bg-dark border-dark text-white\"\n                              style={{ height: '60vh'}}\n                              value={props.activeNote.getContent()}\n                              onChange={contentChange}/>\n        </div>\n    );\n\n};","import * as React from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {setActiveNote} from \"../actions\";\nimport {Note} from \"../model/Note\";\n\nexport const NotePath = function (props: { path: Array<Note> }) {\n    const dispatch = useDispatch();\n\n    const items = props.path.map(p => (\n        <li key={p.getId()} className=\"breadcrumb-item\">\n            <span className=\"cursor-pointer\"\n                  onClick={() => dispatch(setActiveNote(p))}>\n                { p.getTitle() }\n            </span>\n        </li>\n    ));\n\n    return (\n        <ol className=\"breadcrumb py-0 mb-1\">\n            { items }\n        </ol>\n    );\n};","import * as React from \"react\";\nimport {Note} from \"../model/Note\";\nimport {ActiveNote} from \"../reducers\";\nimport {closeActive, setActiveNote} from \"../actions\";\nimport {useDispatch} from \"react-redux\";\n\nexport function EditorTab(props: { tab: Note, activeNote: ActiveNote }) {\n\n    const dispatch = useDispatch();\n    let activeClass = props.activeNote && props.tab.getId() === props.activeNote.getId() ? 'bg-dark rounded-top' : '';\n    let className = `col-auto py-2 px-3 text-truncate ` + activeClass;\n\n    const setActive = () => {\n        dispatch(setActiveNote(props.tab))\n    };\n\n    const close = (event: React.MouseEvent<HTMLElement>) => {\n        event.stopPropagation();\n        dispatch(closeActive());\n    };\n\n    return (\n      <div className={className} style={{ maxWidth: '100px' }} onClick={setActive}>\n          { activeClass &&\n            <i className=\"mr-2 fa fa-times\" onClick={close}/>\n          }\n          { props.tab.getTitle() }\n      </div>\n    );\n}","import * as React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {ActiveNote, Notes} from \"../reducers\";\nimport {Note} from \"../model/Note\";\nimport {EditorTab} from \"./EditorTab\";\n\nexport function EditorTabs() {\n    const opened = useSelector<Notes, Array<Note>>(state => state.openedNotes);\n    const activeNote = useSelector<Notes, ActiveNote>(state => state.active);\n    const tabs = opened.map(tab => {\n        return (\n            <EditorTab tab={tab} activeNote={activeNote}/>\n        )\n    });\n\n    return (\n        <div className=\"row mx-0\">\n            {tabs}\n        </div>\n    )\n}","import * as React from \"react\";\nimport {NoteEditorPlaceholder} from \"./NoteEditorPlaceholder\";\nimport {NoteTitle} from \"./NoteTitle\";\nimport {NoteContent} from \"./NoteContent\";\nimport {NotePath} from \"./NotePath\";\nimport {useSelector} from \"react-redux\";\nimport {ActiveNote, Notes} from \"../reducers\";\nimport {Note} from \"../model/Note\";\nimport {EditorTabs} from \"./EditorTabs\";\n\nexport const NoteEditor = function () {\n\n    const activeNote: ActiveNote = useSelector<Notes, ActiveNote>((state: Notes) => state.active);\n    const path = useSelector<Notes, Array<Note>>((state: Notes) => state.path);\n\n    return (\n        <>\n            <div>\n                <EditorTabs/>\n            </div>\n            { activeNote &&\n                <>\n                    <div className=\"rounded-bottom bg-dark\">\n                        <NoteTitle activeNote={activeNote}/>\n                        <NotePath path={path}/>\n                        <NoteContent activeNote={activeNote}/>\n                    </div>\n                </>\n            }\n            { !activeNote &&\n                <div className=\"rounded bg-dark\">\n                    <NoteEditorPlaceholder/>\n                </div>\n            }\n        </>\n    );\n};","import * as React from \"react\";\nimport {Tree} from \"./Tree\";\nimport {useDispatch} from \"react-redux\";\nimport {setActiveNote} from \"../actions\";\nimport {ActiveNote} from \"../reducers\";\nimport {Note} from \"../model/Note\";\n\nexport const TreeNode = function (props: { note: Note, activeNote: ActiveNote }) {\n\n    const dispatch = useDispatch();\n    const active = props.activeNote && props.note.getId() === props.activeNote.getId();\n    const activeClass = active ? 'text-white' : '';\n\n    const setActive = () => {\n        dispatch(setActiveNote(props.note));\n    };\n\n    return (\n        <li className=\"list-group-item border-0 px-0 py-0\">\n            <div className={\"d-flex justify-content-between align-items-center py-2 \" + activeClass}\n                 onClick={setActive}>\n                { props.note.getTitle() }\n            </div>\n            <div className=\"pl-3\">\n                <Tree notes={props.note.getChildren()} activeNote={props.activeNote}/>\n            </div>\n        </li>\n    );\n};","import * as React from \"react\";\nimport {TreeNode} from \"./TreeNode\";\nimport {Note} from \"../model/Note\";\nimport {ActiveNote} from \"../reducers\";\n\nexport const Tree = function (props: { notes: Array<Note>, activeNote: ActiveNote }) {\n\n    let items = props.notes.map(note => (\n        <TreeNode key={note.getId()} note={note} activeNote={props.activeNote}/>\n    ));\n\n    return (\n        <ul className=\"list-group border-0\">\n            { items }\n        </ul>\n    );\n};","import * as React from \"react\";\n\nexport const CreateNoteFormButtons = function (props: { addNote: () => void, hideForm: () => void }) {\n    return (\n        <div className=\"btn-group\">\n            <button className=\"btn btn-sm btn-secondary text-center\"\n                    style={{ width: '30px' }}\n                    onClick={props.addNote}>\n                <i className=\"fa fa-check\"/>\n            </button>\n            <button className=\"btn btn-sm btn-secondary text-center\"\n                    style={{ width: '30px' }}\n                    onClick={props.hideForm}>\n                <i className=\"fa fa-times\"/>\n            </button>\n        </div>\n    );\n};","import * as React from \"react\";\nimport {CreateNoteFormButtons} from \"./CreateNoteFormButtons\";\nimport {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {addNote} from \"../actions\";\n\nexport const CreateNoteForm = function () {\n\n    const dispatch = useDispatch();\n    const [formVisible, setFormVisible] = useState<boolean>(false);\n    const [title, setTitle] = useState<string>('');\n\n    const createNote = () => {\n        dispatch(addNote(title));\n        setTitle('');\n        setFormVisible(false);\n    };\n\n    const hideForm = () => setFormVisible(false);\n    const showForm = () => setFormVisible(true);\n\n    const updateTitle = (event: React.ChangeEvent<HTMLInputElement>) => setTitle(event.target.value);\n\n    return (\n        <div style={{ height: '32px' }}>\n            { !formVisible &&\n                <span className=\"font-weight-bold cursor-pointer\" onClick={showForm}>\n                    Create new note\n                </span>\n            }\n            { formVisible &&\n                <div className=\"row\">\n                    <div className=\"col pr-0\">\n                        <input type=\"text\"\n                               className=\"form-control form-control-sm border-success\"\n                               value={title}\n                               onChange={updateTitle}\n                               placeholder=\"Note title\"/>\n                    </div>\n                    <div className=\"col-auto pr-0 pl-1\">\n                        <CreateNoteFormButtons addNote={createNote} hideForm={hideForm}/>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n\n};","import * as React from \"react\";\nimport {Tree} from \"./Tree\";\nimport {useSelector} from \"react-redux\";\nimport {CreateNoteForm} from \"./CreateNoteForm\";\nimport {ActiveNote, Notes} from \"../reducers\";\nimport {Note} from \"../model/Note\";\n\nexport const Navigation = function () {\n\n    const filter = useSelector<Notes, string>(state => state.filter);\n    const filteredNotes = useSelector<Notes, Array<Note>>(state => state.filteredNotes);\n    const notes = useSelector<Notes, Array<Note>>(state => state.notes);\n    const activeNote = useSelector<Notes, ActiveNote>(state => state.active);\n\n    return (\n        <div>\n            <CreateNoteForm/>\n            <Tree notes={filter ? filteredNotes : notes} activeNote={activeNote}/>\n        </div>\n    );\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootswatch/dist/solar/bootstrap.min.css';\n\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport { App } from \"./App.tsx\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {Header} from \"./header/Header\";\n\nimport './App.css'\nimport {NoteEditor} from \"./editor/NoteEditor\";\nimport {Navigation} from \"./navigation/Navigation\";\n\nexport const App = function () {\n    return (\n        <div className=\"container mt-5\">\n            <div className=\"card shadow-lg\">\n                <Header/>\n                <div className=\"card-body m-0 p-0\">\n                    <div className=\"app-grid\">\n                        <div className=\"p-3\">\n                            <Navigation/>\n                        </div>\n                        <div className=\"p-3\">\n                            <NoteEditor/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};"],"sourceRoot":""}